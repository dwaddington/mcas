{"componentChunkName":"component---src-pages-index-mdx","path":"/","result":{"pageContext":{"frontmatter":{},"relativePagePath":"/index.mdx","titleType":"page","MdxNode":{"id":"556daa1c-c49e-5973-a190-6403482f84da","children":[],"parent":"53c94c84-5560-528a-a35c-1c3aa2deb4b5","internal":{"content":"import HomepageTemplate from 'gatsby-theme-carbon/src/templates/Homepage';\nexport default HomepageTemplate;\n\n<br />\n\n<Row className=\"mock-gallery\">\n<Column colMd={2} colLg={2}>\n\n![micro illustration example](../images/1x/MCAS_logo_wb.png)\n\n</Column>\n<Column colMd={4} colLg={4}>\n\n\n</Column>\n<Column colMd={4} colLg={4}>\n\n\n\n</Column>\n</Row>\n\n\n\n\n\n## What is MCAS?\n\nMCAS is an advanced in-memory object store designed from the ground up\nto leverage Persistent Memory and RDMA network technology.  The result,\nunprecedented performance for operations on durable multi-TB data.\n\nAt the core of MCAS is a sequentially consistent sharded data architecture.\nExcept for large DMA transfers, <strong>put</strong>, <strong>get</strong> and <strong>invoke</strong> operations are made synchronously.  That is, when\nan operation returns, the data has been fully transferred and (in the case\nof write) made fully persistent.\n\n\n## Key Use-cases\n\n* Real-time analytics and unpredictable workloads\n* Distributed durable metadata (e.g., as a replacement for etcd)\n* Data aggregation (e.g. Deep Learning parameters)\n\n## Key Features\n\n* Over 20M synchronous random read IOPS at less than a 7usec round-trip.\n* Over 10M synchronous random write IOPS at less than 10usec round-trip.\n* Support for basic key-value API (C++, Python).\n* Plugin architecture for Active Data Objects that allow deployment of data-specific operations executable in-store (C++, Python and other languages).\n* Deployable on both plain TCP/IP sockets and high-performance RDMA (ibverbs).\n* Zero-copy transfer of data when deployed on RDMA networks, supporting GPU-direct and other direct to device DMA technology.\n* Fast primary index based on a crash-consistent hash table.\n* Support for optional secondary indexes for range scans etc.\n* Support for DRAM (without durability) and Intel Optane DC Persistent Memory.\n\n\n    \n","type":"Mdx","contentDigest":"354953b4fa465f3395677877f33a8307","counter":132,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":""},"exports":{},"rawBody":"import HomepageTemplate from 'gatsby-theme-carbon/src/templates/Homepage';\nexport default HomepageTemplate;\n\n<br />\n\n<Row className=\"mock-gallery\">\n<Column colMd={2} colLg={2}>\n\n![micro illustration example](../images/1x/MCAS_logo_wb.png)\n\n</Column>\n<Column colMd={4} colLg={4}>\n\n\n</Column>\n<Column colMd={4} colLg={4}>\n\n\n\n</Column>\n</Row>\n\n\n\n\n\n## What is MCAS?\n\nMCAS is an advanced in-memory object store designed from the ground up\nto leverage Persistent Memory and RDMA network technology.  The result,\nunprecedented performance for operations on durable multi-TB data.\n\nAt the core of MCAS is a sequentially consistent sharded data architecture.\nExcept for large DMA transfers, <strong>put</strong>, <strong>get</strong> and <strong>invoke</strong> operations are made synchronously.  That is, when\nan operation returns, the data has been fully transferred and (in the case\nof write) made fully persistent.\n\n\n## Key Use-cases\n\n* Real-time analytics and unpredictable workloads\n* Distributed durable metadata (e.g., as a replacement for etcd)\n* Data aggregation (e.g. Deep Learning parameters)\n\n## Key Features\n\n* Over 20M synchronous random read IOPS at less than a 7usec round-trip.\n* Over 10M synchronous random write IOPS at less than 10usec round-trip.\n* Support for basic key-value API (C++, Python).\n* Plugin architecture for Active Data Objects that allow deployment of data-specific operations executable in-store (C++, Python and other languages).\n* Deployable on both plain TCP/IP sockets and high-performance RDMA (ibverbs).\n* Zero-copy transfer of data when deployed on RDMA networks, supporting GPU-direct and other direct to device DMA technology.\n* Fast primary index based on a crash-consistent hash table.\n* Support for optional secondary indexes for range scans etc.\n* Support for DRAM (without durability) and Intel Optane DC Persistent Memory.\n\n\n    \n","fileAbsolutePath":"/Users/danielwaddington/git/mcas-docs/src/pages/index.mdx"}}}}