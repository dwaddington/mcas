{"componentChunkName":"component---src-pages-getting-started-index-mdx","path":"/getting-started/","result":{"pageContext":{"frontmatter":{"title":"Getting started","description":"Quick start guide for getting acclimated with MCAS"},"relativePagePath":"/getting-started/index.mdx","titleType":"page","MdxNode":{"id":"425366e9-1f79-56d9-aa04-06b5f219ed95","children":[],"parent":"3dce1fc8-cdf6-5fd5-b532-7444a311997a","internal":{"content":"---\ntitle: Getting started\ndescription: Quick start guide for getting acclimated with MCAS\n---\n\n<PageDescription>\n\nMCAS is designed for flexible deployment.  However, it is positioned for\nspecific network and memory hardware if available.\n\n</PageDescription>\n\n## Platform Preparation\n\n1. **Operating System** - install one of the following supported distributions:\n    - Ubuntu 18.04 LTS x86_64\n    - Fedora Core 27, 30 or 32 x86_64\n    - RHEL8 x86_64\n\n2. **Mellanox RDMA** - for high-performance MCAS supports Mellanox RDMA network\ncards and has been tested with ConnectX-4 and ConnectX-5.  MCAS can operate with\nplain TCP/IP sockets, but performance is significantly slower.  Mellanox OFED\n(OpenFabrics Enterprise Distribution for Linux) distributions can be downloaded\nfrom https://www.mellanox.com/products/infiniband-drivers/linux/mlnx_ofed.\n  ```bash\n    $ ibdev2netdev\n    mlx5_0 port 1 ==> enp216s0f0 (Up)\n    mlx5_1 port 1 ==> enp216s0f1 (Up)\n  ```\n\n3. **Persistent Memory** - MCAS is designed explicitly for persistent memory.  However,\nit can be used with DRAM only (mapstore) or with emulated persistent memory.\nEmulated or real persistent memory must be\nconfigured in _device DAX_ mode.  See https://pmem.io/2016/02/22/pm-emulation.html for\ninformation on PM emulation.  Verify availability of devdax PM:\n  ```bash\n  ls /dev/dax*\n  chmod a+rwx /dev/dax*\n  ```\n\n## Building MCAS\n\n1. Check out source and update submodules:\n   ```sh\n   git clone https://github.com/IBM/mcas.git\n   cd mcas\n   git submodule update --init --recursive\n   ```\n\n2. Install package dependencies. For example:\n   ```sh\n   cd mcas/deps\n   sudo ./install-yum-fc27.sh\n   ```\n\n3. Configure cmake build (e.g. release build):\n   ```sh\n   mkdir build\n   cd build\n   cmake -DBUILD_KERNEL_SUPPORT=ON -DFLATBUFFERS_BUILD_TESTS=0 -DTBB_BUILD_TESTS=0 -DBUILD_PYTHON_SUPPORT=1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=`pwd`/dist ..\n   ```\n\n4. Make bootstrap (this only needs to happen once):\n   ```sh\n   make bootstrap\n   ```\n\n5. Perform rest of build (which can be repeated on code change):\n   ```sh\n   make -j install\n   ```\n   \n\n## Before running code\n\nMCAS currently requires two custom kernel modules.  One, `xpmem.ko` is needed for the 'mapstore' backend component.  The other, `mcasmod.ko` is needed for the 'hstore' components.  Normmaly, both modules should be loaded into the system after they have been build.\n\n```sh\ninsmod ./dist/lib/modules/4.18.19-100.fc27.x86_64/xpmem.ko\n```\n\n```sh\ninsmod ./dist/bin/mcasmod.ko\n```\n\n**Note**: the _hstore_ backend is preferred.  If you are using the\n  _mapstore_ backend, the direct operations (e.g. 'get_direct,\n  put_direct) that perform zero-copy DMA transfers will not work.\n\n## Running an example\n\n### Launch MCAS server\n\nThe MCAS server can be launched from the build directory.  Using one of the pre-supplied (testing) configuration files:\n\n```bash\n./dist/bin/mcas --conf ./dist/testing/mapstore-0.conf\n```\n\nThis configuration file defines a single shard, using port 11911 on the `mlx5_0` RDMA NIC adapter.\n\nNote, ```./dist``` is the location of the installed distribution.\n\n### Launch the Python client\n\nAgain, from the build directory:\n\n```bash\n./dist/bin/mcas-shell\n```\n\nFirst open a session to the MCAS server:\n\n```python\nsession = mcas.Session(ip='10.0.0.101', port=11911)\n```\n\nNext create a pool. Provide pool name, size of pool in bytes and expected number of objects (presizes hash table):\n\n```python\npool = session.create_pool('pool0', 64*1024, 1000)\n```\n\nNow we can create key-value pairs:\n\n```python\npool.put('myPet','doggy')\n```\n\nAnd then retrieve the value back:\n\n```python\npool.get('myPet')\n```\n\nWe can configure a volatile index for the pool.  This allows us to perform scans on the key space - find_key(expression, offset).\n\n```python\npool.configure(\"AddIndex::VolatileTree\")\npool.find_key('regex:.*', 0)\n```\n\nFinally, the pool can be closed.\n\n```python\npool.close()\n```\n\n","type":"Mdx","contentDigest":"01dbd31d4698ef94a9a620ae7f94c648","counter":139,"owner":"gatsby-plugin-mdx"},"frontmatter":{"title":"Getting started","description":"Quick start guide for getting acclimated with MCAS"},"exports":{},"rawBody":"---\ntitle: Getting started\ndescription: Quick start guide for getting acclimated with MCAS\n---\n\n<PageDescription>\n\nMCAS is designed for flexible deployment.  However, it is positioned for\nspecific network and memory hardware if available.\n\n</PageDescription>\n\n## Platform Preparation\n\n1. **Operating System** - install one of the following supported distributions:\n    - Ubuntu 18.04 LTS x86_64\n    - Fedora Core 27, 30 or 32 x86_64\n    - RHEL8 x86_64\n\n2. **Mellanox RDMA** - for high-performance MCAS supports Mellanox RDMA network\ncards and has been tested with ConnectX-4 and ConnectX-5.  MCAS can operate with\nplain TCP/IP sockets, but performance is significantly slower.  Mellanox OFED\n(OpenFabrics Enterprise Distribution for Linux) distributions can be downloaded\nfrom https://www.mellanox.com/products/infiniband-drivers/linux/mlnx_ofed.\n  ```bash\n    $ ibdev2netdev\n    mlx5_0 port 1 ==> enp216s0f0 (Up)\n    mlx5_1 port 1 ==> enp216s0f1 (Up)\n  ```\n\n3. **Persistent Memory** - MCAS is designed explicitly for persistent memory.  However,\nit can be used with DRAM only (mapstore) or with emulated persistent memory.\nEmulated or real persistent memory must be\nconfigured in _device DAX_ mode.  See https://pmem.io/2016/02/22/pm-emulation.html for\ninformation on PM emulation.  Verify availability of devdax PM:\n  ```bash\n  ls /dev/dax*\n  chmod a+rwx /dev/dax*\n  ```\n\n## Building MCAS\n\n1. Check out source and update submodules:\n   ```sh\n   git clone https://github.com/IBM/mcas.git\n   cd mcas\n   git submodule update --init --recursive\n   ```\n\n2. Install package dependencies. For example:\n   ```sh\n   cd mcas/deps\n   sudo ./install-yum-fc27.sh\n   ```\n\n3. Configure cmake build (e.g. release build):\n   ```sh\n   mkdir build\n   cd build\n   cmake -DBUILD_KERNEL_SUPPORT=ON -DFLATBUFFERS_BUILD_TESTS=0 -DTBB_BUILD_TESTS=0 -DBUILD_PYTHON_SUPPORT=1 -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX:PATH=`pwd`/dist ..\n   ```\n\n4. Make bootstrap (this only needs to happen once):\n   ```sh\n   make bootstrap\n   ```\n\n5. Perform rest of build (which can be repeated on code change):\n   ```sh\n   make -j install\n   ```\n   \n\n## Before running code\n\nMCAS currently requires two custom kernel modules.  One, `xpmem.ko` is needed for the 'mapstore' backend component.  The other, `mcasmod.ko` is needed for the 'hstore' components.  Normmaly, both modules should be loaded into the system after they have been build.\n\n```sh\ninsmod ./dist/lib/modules/4.18.19-100.fc27.x86_64/xpmem.ko\n```\n\n```sh\ninsmod ./dist/bin/mcasmod.ko\n```\n\n**Note**: the _hstore_ backend is preferred.  If you are using the\n  _mapstore_ backend, the direct operations (e.g. 'get_direct,\n  put_direct) that perform zero-copy DMA transfers will not work.\n\n## Running an example\n\n### Launch MCAS server\n\nThe MCAS server can be launched from the build directory.  Using one of the pre-supplied (testing) configuration files:\n\n```bash\n./dist/bin/mcas --conf ./dist/testing/mapstore-0.conf\n```\n\nThis configuration file defines a single shard, using port 11911 on the `mlx5_0` RDMA NIC adapter.\n\nNote, ```./dist``` is the location of the installed distribution.\n\n### Launch the Python client\n\nAgain, from the build directory:\n\n```bash\n./dist/bin/mcas-shell\n```\n\nFirst open a session to the MCAS server:\n\n```python\nsession = mcas.Session(ip='10.0.0.101', port=11911)\n```\n\nNext create a pool. Provide pool name, size of pool in bytes and expected number of objects (presizes hash table):\n\n```python\npool = session.create_pool('pool0', 64*1024, 1000)\n```\n\nNow we can create key-value pairs:\n\n```python\npool.put('myPet','doggy')\n```\n\nAnd then retrieve the value back:\n\n```python\npool.get('myPet')\n```\n\nWe can configure a volatile index for the pool.  This allows us to perform scans on the key space - find_key(expression, offset).\n\n```python\npool.configure(\"AddIndex::VolatileTree\")\npool.find_key('regex:.*', 0)\n```\n\nFinally, the pool can be closed.\n\n```python\npool.close()\n```\n\n","fileAbsolutePath":"/Users/danielwaddington/git/mcas-docs/src/pages/getting-started/index.mdx"}}}}